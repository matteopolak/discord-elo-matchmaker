generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      String @id
  guildId String
}

model Party {
  id       Int    @id @default(autoincrement())
  leader   User   @relation("partyLeader", fields: [leaderId], references: [id])
  leaderId Int    @unique
  invites  User[] @relation("partyInvites")
  members  User[] @relation("partyMembers")
}

model Queue {
  id        Int    @id @default(autoincrement())
  channelId String @unique
  guildId   String
  mode      Mode   @relation(fields: [modeId], references: [id])
  modeId    Int

  @@unique([guildId, channelId])
}

model GameUser {
  id     Int  @id @default(autoincrement())
  team   Int  @db.SmallInt
  index  Int  @db.SmallInt
  user   User @relation(fields: [userId], references: [id])
  userId Int
  game   Game @relation(fields: [gameId], references: [id])
  gameId Int
}

model Game {
  id        Int        @id @default(autoincrement())
  state     State      @relation(fields: [stateId], references: [id])
  stateId   Int
  mode      Mode       @relation(fields: [modeId], references: [id])
  modeId    Int
  users     GameUser[]
  createdAt DateTime   @default(now())
  startedAt DateTime?
  endedAt   DateTime?

  guildId         String
  textChannelId   String   @unique
  voiceChannelIds String[]

  @@index([textChannelId])
  @@index([voiceChannelIds])
}

model Faction {
  id         Int      @id @default(autoincrement())
  leaderId   Int      @unique
  leader     User     @relation("factionLeader", fields: [leaderId], references: [id])
  name       String?
  nameLower  String?  @unique
  members    User[]   @relation("factionMembers")
  invites    User[]   @relation("factionInvites")
  experience Int      @default(0)
  createdAt  DateTime @default(now())
}

model User {
  id          Int        @id @default(autoincrement())
  discordId   String     @unique
  bannedUntil DateTime?
  profiles    Profile[]
  createdAt   DateTime   @default(now())
  gameUsers   GameUser[]

  party        Party?  @relation("partyMembers", fields: [partyId], references: [id])
  partyLeader  Party?  @relation("partyLeader")
  partyInvites Party[] @relation("partyInvites")
  partyId      Int?

  faction        Faction?  @relation("factionMembers", fields: [factionId], references: [id])
  factionLeader  Faction?  @relation("factionLeader")
  factionInvites Faction[] @relation("factionInvites")
  factionId      Int?

  minecraft MinecraftUser?
}

model Profile {
  user       User @relation(fields: [userId], references: [id])
  userId     Int
  mode       Mode @relation(fields: [modeId], references: [id])
  modeId     Int
  wins       Int  @default(0)
  winstreak  Int  @default(0)
  losses     Int  @default(0)
  losestreak Int  @default(0)

  // The rating deviation of the player, squared;
  // default is (350 / SCALING_FACTOR) = 2.01476187242
  phi Float @default(2.01476187242)
  // The rating of the player
  mu  Float @default(0)
  rv  Float @default(0.06)

  @@id([modeId, userId])
}

model Mode {
  id             Int       @id @default(autoincrement())
  connector      String?
  name           String
  nameLower      String    @unique
  teams          Int       @default(2) @db.SmallInt
  playersPerTeam Int       @default(4) @db.SmallInt
  maximumStdDev  Float     @default(100)
  enabled        Boolean   @default(true)
  profiles       Profile[]
  queues         Queue[]
  games          Game[]
  states         State[]
}

model State {
  id      Int     @id @default(autoincrement())
  name    String
  enabled Boolean @default(true)
  index   Int     @default(0) @db.SmallInt
  games   Game[]
  mode    Mode    @relation(fields: [modeId], references: [id])
  modeId  Int
}

model Event {
  messageId String   @id
  event     String
  userId    String
  expiresAt DateTime
}

model MinecraftUser {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  username String
  uuid     String @unique @db.Uuid
}
